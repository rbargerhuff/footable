<?php

/**
 * @file
 * Provides Views integration for the jQuery FooTable plugin.
 */

define('FOOTABLE_PLUGIN_VERSION_MIN', '3.1.4');

/**
 * Implements hook_permission().
 */
function footable_permission() {
  return [
    'administer footable' => [
      'title' => t('Administer FooTable'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function footable_menu() {
  $items['admin/config/user-interface/footable/settings'] = [
    'title' => 'Settings',
    'description' => 'Configure FooTable settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['footable_form_admin_settings'],
    'access arguments' => ['administer footable'],
    'file' => 'footable.admin.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  return $items;
}

/**
 * Implements hook_theme().
 */
function footable_theme($existing, $type, $theme, $path) {
  return [
    'footable' => [
      'variables' => [
        'header' => NULL,
        'rows' => NULL,
        'attributes' => NULL,
        'caption' => NULL,
        'breakpoints' => [],
        'expand_first' => FALSE,
        'show_header' => TRUE,
        'toggle_column' => 'first',
      ],
      'file' => 'footable.theme.inc',
    ],
    'footable_style_plugin_table' => [
      'render element' => 'form',
      'file' => 'footable.theme.inc',
    ],
  ];
}

/**
 * Implements hook_views_api().
 */
function footable_views_api() {
  return [
    'api' => 3.0,
    'path' => backdrop_get_path('module', 'footable') . '/views',
  ];
}

/**
 * Implements hook_jqmulti_files().
 */
function footable_jqmulti_files() {
  return [
    backdrop_get_path('module', 'footable') . '/footable.js',
  ];
}

/**
 * Implements hook_jqmulti_libraries().
 */
function footable_jqmulti_libraries() {
  return [
    'footable',
  ];
}

/**
 * Implements hook_library_info().
 */
function footable_library_info() {
  $libraries = [];

  $libraries['footable_standalone_source'] = [
    'title' => 'FooTable - Standalone Source',
    'website' => 'https://github.com/fooplugins/FooTable',
    'version' => '3.1.6',
    'js' => [
      backdrop_get_path('module', 'footable') . '/FooTable/compiled/footable.js' => [],
    ],
    'css' => [
      backdrop_get_path('module', 'footable') . '/FooTable/compiled/footable.standalone.css' => [],
    ],
  ];

  $libraries['footable_standalone_minified'] = [
    'title' => 'FooTable - Standalone Minified',
    'website' => 'https://github.com/fooplugins/FooTable',
    'version' => '3.1.6',
    'js' => [
      backdrop_get_path('module', 'footable') . '/FooTable/compiled/footable.min.js' => [],
    ],
    'css' => [
      backdrop_get_path('module', 'footable') . '/FooTable/compiled/footable.standalone.min.css' => [],
    ],
  ];

  $libraries['footable_bootstrap_source'] = [
    'title' => 'FooTable - Bootstrap Source',
    'website' => 'https://github.com/fooplugins/FooTable',
    'version' => '3.1.6',
    'js' => [
      backdrop_get_path('module', 'footable') . '/FooTable/compiled/footable.js' => [],
    ],
    'css' => [
      backdrop_get_path('module', 'footable') . '/FooTable/compiled/footable.bootstrap.css' => [],
    ],
  ];

  $libraries['footable_bootstrap_minified'] = [
    'title' => 'FooTable - Bootstrap Minified',
    'website' => 'https://github.com/fooplugins/FooTable',
    'version' => '3.1.6',
    'js' => [
      backdrop_get_path('module', 'footable') . '/FooTable/compiled/footable.min.js' => [],
    ],
    'css' => [
      backdrop_get_path('module', 'footable') . '/FooTable/compiled/footable.bootstrap.min.css' => [],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_config_info().
 */
function footable_config_info() {
  $prefixes['footable.settings'] = [
    'label' => t('FooTable settings'),
    'group' => t('Configuration'),
  ];
  return $prefixes;
}

/**
 * Load the FooTable library.
 *
 * @see libraries_load()
 */
function footable_libraries_load() {
  $config = config('footable.settings');
  $type = $config->get('footable_plugin_type');
  $compression = $config->get('footable_plugin_compression');

  backdrop_add_library('footable', 'footable_' . $type . '_' . $compression);
}

/**
 * Display a view as a FooTable style.
 *
 * @see template_preprocess_views_view_table()
 */
function template_preprocess_footable_view(&$vars) {
  template_preprocess_views_view_table($vars);

  $view = $vars['view'];

  $result = $vars['result'] = $vars['rows'];

  $options = $view->style_plugin->options;
  /** @var views_plugin_style_table $handler */
  $handler = $view->style_plugin;

  $fields = &$view->field;
  $columns = $handler->sanitize_columns($options['columns'], $fields);

  $footable = [];

  // Provide backwards compatibility with 7.x-1.x.
  if (!empty($options['footable']['hide']) && empty($options['footable']['breakpoint'])) {
    $options['footable']['breakpoint'] = $options['footable']['hide'];
  }

  // Set columns to be hidden by FooTable plugin.
  foreach ($columns as $field => $column) {
    /** @var views_handler_field $field_handler */
    $field_handler = $fields[$field];

    // Get column type.
    if (!empty($options['info'][$column]['type'])) {
      $vars['column_attributes'][$column]['data-type'] = $options['info'][$column]['type'];
    }
    elseif ($field_handler instanceof views_handler_field_date) {
      $vars['column_attributes'][$column]['data-type'] = 'date';
    }
    elseif (is_numeric($field_handler->last_render)) {
      $vars['column_attributes'][$column]['data-type'] = 'numeric';
    }
    elseif (!empty($field_handler->last_render) && backdrop_strlen($field_handler->last_render) != backdrop_strlen(strip_tags($field_handler->last_render))) {
      $vars['column_attributes'][$column]['data-type'] = 'html';
    }
    else {
      $vars['column_attributes'][$column]['data-type'] = 'text';
    }

    // Add breakpoints.
    if (!empty($options['footable']['breakpoint'][$column])) {
      if (!empty($options['footable']['breakpoint'][$column]['all'])) {
        $options['footable']['breakpoint'][$column] = ['all' => 'all'];
      }
      $vars['column_attributes'][$column]['data-breakpoints'] = implode(' ', array_keys(array_filter($options['footable']['breakpoint'][$column])));
    }

    // Sorting.
    if (!empty($options['footable']['component']['sorting']['enabled'])) {
      $vars['header'][$field] = check_plain(!empty($field_handler) ? $field_handler->label() : '');

      if (empty($options['info'][$field]['sortable']) || !$field_handler->click_sortable()) {
        $vars['column_attributes'][$column]['data-sortable'] = FALSE;
      }
      else {
        if (!empty($options['default']) && $options['default'] == $field) {
          $vars['column_attributes'][$column]['data-sorted'] = TRUE;

          if (!empty($options['info'][$field]['default_sort_order'])) {
            $vars['column_attributes'][$column]['data-direction'] = strtoupper($options['info'][$field]['default_sort_order']);
          }
        }
      }
    }

    // Add data values.
    if (!empty($options['footable']['component']['filtering']['enabled']) || !empty($options['footable']['component']['sorting']['enabled'])) {
      $types = ['html', 'date'];
      foreach ($result as $num => $row) {
        if (in_array($vars['column_attributes'][$column]['data-type'], $types)) {
          $value = strip_tags($vars['rows'][$num][$column]);
          if (!empty($options['footable']['component']['filtering']['enabled'])) {
            $vars['field_attributes'][$field][$num]['data-filter-value'] = $value;
          }
          if (!empty($options['footable']['component']['sorting']['enabled'])) {
            $vars['field_attributes'][$field][$num]['data-sort-value'] = $value;
          }
        }
      }
    }
  }

  // Add FooTable classes and data attributes.
  $type = config_get('footable.settings', 'footable_plugin_type');

  $vars['classes'][] = 'footable';

  if (empty($vars['attributes']['id'])) {
    $vars['attributes']['id'] = backdrop_html_id('footable');
  }

  // Expand all rows.
  $footable['expandAll'] = !empty($options['footable']['expand_all']);

  // Expand first row.
  $footable['expandFirst'] = !empty($options['footable']['expand_first']);

  // Show header.
  $footable['showHeader'] = !empty($options['footable']['show_header']);

  // Expandable column.
  $footable['toggleColumn'] = $options['footable']['toggle_column'];

  // Icon expanded.
  $vars['classes'][] = 'fooicon-expanded-' . $options['footable']['icon_expanded'];

  // Icon collapsed.
  $vars['classes'][] = 'fooicon-collapsed-' . $options['footable']['icon_collapsed'];

  // Add Bootstrap configuration.
  if ($type == 'bootstrap') {
    if (!empty($options['footable']['bootstrap']['striped'])) {
      $vars['classes'][] = 'table-striped';
    }

    if (!empty($options['footable']['bootstrap']['bordered'])) {
      $vars['classes'][] = 'table-bordered';
    }

    if (!empty($options['footable']['bootstrap']['hover'])) {
      $vars['classes'][] = 'table-hover';
    }

    if (!empty($options['footable']['bootstrap']['condensed'])) {
      $vars['classes'][] = 'table-condensed';
    }
  }

  // Add components.
  // Filtering.
  if (!empty($options['footable']['component']['filtering']['enabled'])) {
    $footable['filtering'] = [
      'enabled' => TRUE,
      'delay' => $options['footable']['component']['filtering']['delay'],
      'ignoreCase' => !empty($options['footable']['component']['filtering']['ignore_case']),
      'min' => $options['footable']['component']['filtering']['min'],
      'placeholder' => t($options['footable']['component']['filtering']['placeholder']),
      'position' => $options['footable']['component']['filtering']['position'],
      'space' => $options['footable']['component']['filtering']['space'],
    ];
  }

  // Paging.
  if (!empty($options['footable']['component']['paging']['enabled'])) {
    $footable['paging'] = [
      'enabled' => TRUE,
      'countFormat' => $options['footable']['component']['paging']['count_format'],
      'current' => $options['footable']['component']['paging']['current'],
      'limit' => $options['footable']['component']['paging']['limit'],
      'position' => $options['footable']['component']['paging']['position'],
      'size' => $options['footable']['component']['paging']['size'],
    ];
  }

  // Sorting.
  if (!empty($options['footable']['component']['sorting']['enabled'])) {
    $footable['sorting'] = [
      'enabled' => TRUE,
    ];
  }

  // Add breakpoints.
  $footable['breakpoints'] = [];
  foreach (footable_breakpoint_load_multiple() as $breakpoint) {
    if (!empty($options['footable']['overwrite'][$breakpoint->machine_name])) {
      $breakpoint->breakpoint = $options['footable']['overwrite'][$breakpoint->machine_name];
    }
    $footable['breakpoints'][$breakpoint->machine_name] = (int) $breakpoint->breakpoint;
  }

  // Add FooTable plugin files and calling script.
  footable_libraries_load();

  backdrop_add_js(['footable' => [$vars['attributes']['id'] => $footable]], ['type' => 'setting']);
  backdrop_add_js(backdrop_get_path('module', 'footable') . '/footable.js');
  backdrop_add_css(backdrop_get_path('module', 'footable') . '/css/footable_' . $type . '.css');
}

/**
 * Sort FooTable breakpoint by breakpoint with name as a fallback.
 */
function footable_breakpoint_sort($a, $b) {
  if ($a->breakpoint == $b->breakpoint) {
    return strnatcasecmp($a->name, $b->name);
  }
  return ($a->breakpoint < $b->breakpoint) ? -1 : 1;
}

/**
 * Returns a list of FooTable breakpoints including or excluding the default
 * FooTable breakpoints (All / Default).
 *
 * @param bool $default
 *   Include the default FooTable breakpoints (All / Default).
 * @param bool $disabled
 *   Include disabled breakpoints.
 *
 * @return array
 *   List of loaded FooTable breakpoints.
 */
function footable_breakpoint_load_all($default = FALSE, $disabled = FALSE) {
  $breakpoints = footable_breakpoint_load_multiple([], $disabled);

  if ($default) {
    $breakpoints['all'] = (object) [
      'name' => 'All',
      'machine_name' => 'all',
      'breakpoint' => 'all',
    ];
    $breakpoints['default'] = (object) [
      'name' => 'Default',
      'machine_name' => 'default',
      'breakpoint' => 'default',
    ];
  }

  backdrop_alter('footable_breakpoint_load_all', $breakpoints);
  uasort($breakpoints, 'footable_breakpoint_sort');
  return $breakpoints;
}

/**
 * Returns a list of FooTable breakpoints filtered by machine name.
 *
 * @param array $machine_names
 *   List of machines names to filter by or an empty array to load all
 *   breakpoints.
 * @param bool $disabled
 *   Include disabled breakpoints.
 *
 * @return array
 *   List of loaded FooTable breakpoints.
 */
function footable_breakpoint_load_multiple(array $machine_names = [], $disabled = FALSE) {
  $breakpoints = array();

  // Optionally skip loading the defaults.
  if (config_get('footable.settings', 'footable_breakpoint_load_default')) {
    $breakpoint = new stdClass();
    $breakpoint->disabled = FALSE;
    $breakpoint->api_version = 1;
    $breakpoint->name = 'Extra small devices';
    $breakpoint->machine_name = 'xs';
    $breakpoint->breakpoint = 480;
    $breakpoints[$breakpoint->machine_name] = $breakpoint;

    $breakpoint = new stdClass();
    $breakpoint->disabled = FALSE;
    $breakpoint->api_version = 1;
    $breakpoint->name = 'Small devices';
    $breakpoint->machine_name = 'sm';
    $breakpoint->breakpoint = 768;
    $breakpoints[$breakpoint->machine_name] = $breakpoint;

    $breakpoint = new stdClass();
    $breakpoint->disabled = FALSE;
    $breakpoint->api_version = 1;
    $breakpoint->name = 'Medium devices';
    $breakpoint->machine_name = 'md';
    $breakpoint->breakpoint = 992;
    $breakpoints[$breakpoint->machine_name] = $breakpoint;

    $breakpoint = new stdClass();
    $breakpoint->disabled = FALSE;
    $breakpoint->api_version = 1;
    $breakpoint->name = 'Large devices';
    $breakpoint->machine_name = 'lg';
    $breakpoint->breakpoint = 1200;
    $breakpoints[$breakpoint->machine_name] = $breakpoint;
  }

  backdrop_alter('footable_breakpoint_load', $breakpoints);

  if (!$disabled) {
    foreach ($breakpoints as $machine_name => $breakpoint) {
      if (!empty($breakpoint->disabled)) {
        unset($breakpoints[$machine_name]);
      }
    }
  }

  uasort($breakpoints, 'footable_breakpoint_sort');
  return $breakpoints;
}

/**
 * Load a single FooTable breakpoint by machine name.
 *
 * @param string $machine_name
 *   The breakpoint machine name.
 *
 * @return bool|object
 *   The breakpoint configuration, or FALSE if no matching breakpoint was found.
 */
function footable_breakpoint_load($machine_name) {
  $breakpoints = footable_breakpoint_load_multiple([$machine_name], TRUE);
  if (isset($breakpoints[$machine_name])) {
    return $breakpoints[$machine_name];
  }
  return FALSE;
}

/**
 * Save a breakpoint.
 *
 * @param object $breakpoint
 *   FooTable breakpoint object to save to the database. A new breakpoint will
 *   be created if $breakpoint->is_new is set to TRUE, otherwise the breakpoint
 *   will be updated.
 *
 * @return bool|int
 *   If the record insert or update failed, returns FALSE. If it succeeded,
 *   returns SAVED_NEW or SAVED_UPDATED, depending on the operation performed.
 */
function footable_breakpoint_save($breakpoint) {
  if (!isset($breakpoint->is_new)) {
    $breakpoint->is_new = empty($breakpoint->id);
  }

  $update = !empty($breakpoint->is_new) || !empty($breakpoint->in_code_only) ? [] : 'machine_name';
  $result = backdrop_write_record('footable_breakpoint', $breakpoint, $update);
  return $result;
}

/**
 * Delete a single breakpoint by machine name.
 *
 * @param string $machine_name
 *   The breakpoint machine name.
 */
function footable_breakpoint_delete($machine_name) {
  db_delete('footable_breakpoint')
    ->condition('machine_name', $machine_name)
    ->execute();
}

/**
 * Build a list of icons.
 *
 * @return array
 *   A keyed array of in the form of 'name' => 'title'.
 */
function footable_icons() {
  $icons = [
    'plus' => t('Plus'),
    'minus' => t('Minus'),
    'plus-circle' => t('Plus circle'),
    'minus-circle' => t('Minus circle'),
    'chevron-left' => t('Chevron left'),
    'chevron-right' => t('Chevron right'),
    'chevron-up' => t('Chevron up'),
    'chevron-down' => t('Chevron down'),
  ];

  backdrop_alter('footable_icons', $icons);
  return $icons;
}

/**
 * Implements hook_autoload_info().
 */
function footable_autoload_info() {
  return [
    'footable_plugin_style_footable' => 'views/footable_plugin_style_footable.inc',
  ];
}
